rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Check role from custom claims (if available) or allow authenticated users
    function isAdmin() {
      return request.auth.token.role == 'admin' || 
             request.auth.token.role == 'Admin' ||
             request.auth.token.role == 'ADMIN';
    }
    
    function isEmergencyResponder() {
      return request.auth.token.role == 'emergency_responder' || 
             request.auth.token.role == 'EmergencyResponder' ||
             request.auth.token.role == 'EMERGENCY_RESPONDER';
    }
    
    function isEquipmentManager() {
      return request.auth.token.role == 'equipment_manager' || 
             request.auth.token.role == 'EquipmentManager' ||
             request.auth.token.role == 'EQUIPMENT_MANAGER';
    }
    
    function isSiteManager() {
      return request.auth.token.role == 'site_manager' || 
             request.auth.token.role == 'SiteManager' ||
             request.auth.token.role == 'SITE_MANAGER';
    }
    
    function isCustomer() {
      return request.auth.token.role == 'customer' || 
             request.auth.token.role == 'Customer' ||
             request.auth.token.role == 'CUSTOMER' ||
             request.auth.token.role == 'user' ||
             request.auth.token.role == 'User';
    }
    
    function hasValidRole() {
      return isAdmin() || isEmergencyResponder() || isEquipmentManager() || isSiteManager() || isCustomer();
    }
    
    // More permissive role check that allows authenticated users even without custom claims
    function hasValidRoleOrAuthenticated() {
      return hasValidRole() || isAuthenticated();
    }
    
    function isValidNotification() {
      return request.resource.data.keys().hasAll(['userId', 'type', 'title', 'body']) &&
             request.resource.data.userId is string &&
             request.resource.data.type is string &&
             request.resource.data.title is string &&
             request.resource.data.body is string &&
             request.resource.data.read is bool;
    }
    
    function isValidEmergency() {
      return request.resource.data.keys().hasAll(['type', 'description', 'siteId', 'severity']) &&
             request.resource.data.type is string &&
             request.resource.data.description is string &&
             request.resource.data.siteId is string &&
             request.resource.data.severity in ['low', 'medium', 'high', 'critical'];
    }
    
    function isValidAccessRequest() {
      return request.resource.data.keys().hasAll(['userId', 'siteId', 'doorId']) &&
             request.resource.data.userId is string &&
             request.resource.data.siteId is string &&
             request.resource.data.doorId is string &&
             request.resource.data.status in ['pending', 'approved', 'rejected', 'cancelled'];
    }
    
    // Users collection - More permissive for authenticated users
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Sites collection - Allow read for all authenticated users
    match /sites/{siteId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && (isAdmin() || isSiteManager());
    }
    
    // Doors collection - Allow read for all authenticated users
    match /doors/{doorId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && (isAdmin() || isSiteManager());
      
      // Door access logs
      match /accessLogs/{logId} {
        allow read: if isAuthenticated() && (isAdmin() || isSiteManager());
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && isAdmin();
      }
    }
    
    // Access requests collection - More permissive for authenticated users
    match /accessRequests/{requestId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isAdmin() || 
        isSiteManager() ||
        request.auth.uid in resource.data.approvedBy
      );
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId) && isValidAccessRequest();
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isAdmin() || 
        isSiteManager()
      );
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Equipment collection - Allow read for all authenticated users
    match /equipment/{equipmentId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && (isAdmin() || isEquipmentManager());
      
      // Equipment reservations
      match /reservations/{reservationId} {
        allow read: if isAuthenticated() && (
          isOwner(resource.data.userId) || 
          isAdmin() || 
          isEquipmentManager()
        );
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        allow update: if isAuthenticated() && (
          isOwner(resource.data.userId) || 
          isAdmin() || 
          isEquipmentManager()
        );
        allow delete: if isAuthenticated() && (isAdmin() || isEquipmentManager());
      }
    }
    
    // Emergency collection - Allow read for all authenticated users
    match /emergencies/{emergencyId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidEmergency();
      allow update: if isAuthenticated() && (
        isOwner(resource.data.reportedBy) || 
        isAdmin() || 
        isEmergencyResponder()
      );
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Holds collection - Allow read for all authenticated users
    match /holds/{holdId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && (isAdmin() || isSiteManager());
    }
    
    // Chat messages collection - More permissive for authenticated users
    match /chats/{chatId} {
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.participants
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid in resource.data.participants
      );
      allow delete: if isAuthenticated() && isAdmin();
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && (
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants
        );
        allow create: if isAuthenticated() && (
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants
        );
        allow update: if isAuthenticated() && (
          request.auth.uid == resource.data.senderId
        );
        allow delete: if isAuthenticated() && isAdmin();
      }
    }
    
    // Notifications collection - Much more permissive for authenticated users
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isAdmin() ||
        // Allow users to read their own notifications even if role is not set
        (request.auth.uid == resource.data.userId)
      );
      allow create: if isAuthenticated() && isValidNotification();
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isAdmin() ||
        // Allow users to update their own notifications even if role is not set
        (request.auth.uid == resource.data.userId)
      );
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }
    
    // Site memberships collection - Allow read for authenticated users
    match /siteMemberships/{membershipId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && (isAdmin() || isSiteManager());
    }
    
    // User sites collection - Allow read for authenticated users
    match /userSites/{userSiteId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && (isAdmin() || isSiteManager());
    }
    
    // System settings collection (admin only)
    match /systemSettings/{settingId} {
      allow read, write: if isAuthenticated() && isAdmin();
    }
    
    // Analytics collection (admin only)
    match /analytics/{analyticsId} {
      allow read, write: if isAuthenticated() && isAdmin();
    }
    
    // Audit logs collection (admin only)
    match /auditLogs/{logId} {
      allow read, write: if isAuthenticated() && isAdmin();
    }
    
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
